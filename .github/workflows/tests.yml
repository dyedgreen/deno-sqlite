name: "Build and Test"

on: [push, pull_request]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Install Deno
      run: curl -fsSL https://deno.land/x/install/install.sh | sh

    - name: Build generated files
      id: build
      run: |
        export DENO_INSTALL="/home/runner/.deno"
        export PATH="$DENO_INSTALL/bin:$PATH"
        rm -f build/sqlite.{js,wasm} build/lib/sqlite3.{c,h}
        sudo apt-get -y install --no-install-recommends tclsh gcc
        cd build

        make setup
        make amalgamation
        make release

        git status
        declare had_changes="$(
          [[ -n "$(git status --porcelain)" ]] && echo true || echo false
        )"
        echo "::set-output name=had-changes::${had_changes}"

    - name: Run the formatter
      run: /home/runner/.deno/bin/deno fmt --check

    - name: Run tests
      run: /home/runner/.deno/bin/deno test --allow-read --allow-write test.ts

    - name: Run benchmarks
      run: /home/runner/.deno/bin/deno run bench.ts

    - if: success() && steps.build.outputs.had-changes == 'true' && github.event_name == 'push'
      name: Configure git write access
      id: git
      run: |
        declare git_branch="$(echo ${GITHUB_REF#refs/heads/})"
        git remote rm origin
        git remote add origin "https://${GITHUB_ACTOR}:${{ secrets.GITHUB_TOKEN }}@github.com/${GITHUB_REPOSITORY}.git"
        git checkout "${git_branch}"
        git config user.name "$(git log -1 --pretty=format:'%an')"
        git config user.email "$(git log -1 --pretty=format:'%ae')"
        echo "::set-output name=date::$(git log -1 --pretty=format:'%ad')"
        echo "::set-output name=branch::${git_branch}"

    - if: success() && steps.build.outputs.had-changes == 'true' && github.event_name == 'push'
      name: Commit and push generated files
      run: |
        git add ./build
        git commit -m "$(printf 'Rebuild generated files\nhttps://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}')"
        git push --set-upstream origin "${{ steps.git.outputs.branch }}"
      env:
        GIT_COMMITTER_NAME: /x/sqlite
        GIT_COMMITTER_EMAIL: x-sqlite@actions.noreply.github.com
        # We lock the date so the generated commit's hash won't needlessly
        # vary if the action is run multiple times.
        GIT_COMMITTER_DATE: "${{ steps.git.outputs.date }}"
        GIT_AUTHOR_DATE: "${{ steps.git.outputs.date }}"

    - if: success() && steps.build.outputs.had-changes == 'true' && github.event_name != 'push'
      name: Fail if generated files are out-of-date and we can't push
      run: |
        echo "Generated files are out-of-date!"
        git status
        exit 1
